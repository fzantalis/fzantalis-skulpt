// abstract syntax node definitions
// 
// This file is automatically generated by pgen/astgen.py

(function() {

Sk.Ast = {};

Sk.Ast.OP_ASSIGN = 'OP_ASSIGN';
Sk.Ast.OP_DELETE = 'OP_DELETE';
Sk.Ast.OP_APPLY = 'OP_APPLY';

Sk.Ast.SC_LOCAL = 1;
Sk.Ast.SC_GLOBAL = 2;
Sk.Ast.SC_FREE = 3;
Sk.Ast.SC_CELL = 4;
Sk.Ast.SC_UNKNOWN = 5;

Sk.Ast.CO_OPTIMIZED = 0x0001;
Sk.Ast.CO_NEWLOCALS = 0x0002;
Sk.Ast.CO_VARARGS = 0x0004;
Sk.Ast.CO_VARKEYWORDS = 0x0008;
Sk.Ast.CO_NESTED = 0x0010;
Sk.Ast.CO_GENERATOR = 0x0020;
Sk.Ast.CO_GENERATOR_ALLOWED = 0;
Sk.Ast.CO_FUTURE_DIVISION = 0x2000;
Sk.Ast.CO_FUTURE_ABSIMPORT = 0x4000;
Sk.Ast.CO_FUTURE_WITH_STATEMENT = 0x8000;
Sk.Ast.CO_FUTURE_PRINT_FUNCTION = 0x10000;

function flatten(seq)
{
    var l = [];
    for (var i = 0; i < seq.length; ++i)
    {
        if (seq[i].length)
        {
            var subf = flatten(seq[i]);
            for (var j = 0; j < subf.length; ++j)
            {
                l.push(subf[j]);
            }
        }
        else
        {
            l.push(seq[i]);
        }
    }
    return l;
}

function flatten_nodes(seq)
{
    var flat = flatten(seq);
    var ret = [];
    for (var i = 0; i < flat.length; ++i)
    {
        if (flat[i].hasOwnProperty('nodeName')) /* todo; */
        {
            ret.push(flat[i]);
        }
    }
    return ret;
}

//"""

// --------------------------------------------------------
Sk.Ast.Add = function Add(left, right, lineno)
{
    this.nodeName = "Add";
    this.left = left;
    this.right = right;
    this.lineno = lineno;
};

Sk.Ast.Add.prototype.getChildren = function(self) {
    return [self.left, self.right];
};

Sk.Ast.Add.prototype.getChildNodes = function(self) {
    return [self.left, self.right];
};


// --------------------------------------------------------
Sk.Ast.And = function And(nodes, lineno)
{
    this.nodeName = "And";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.And.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.And.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.AssAttr = function AssAttr(expr, attrname, flags, lineno)
{
    this.nodeName = "AssAttr";
    this.expr = expr;
    this.attrname = attrname;
    this.flags = flags;
    this.lineno = lineno;
};

Sk.Ast.AssAttr.prototype.getChildren = function(self) {
    return [self.expr, self.attrname, self.flags];
};

Sk.Ast.AssAttr.prototype.getChildNodes = function(self) {
    return [self.expr];
};


// --------------------------------------------------------
Sk.Ast.AssList = function AssList(nodes, lineno)
{
    this.nodeName = "AssList";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.AssList.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.AssList.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.AssName = function AssName(name, flags, lineno)
{
    this.nodeName = "AssName";
    this.name = name;
    this.flags = flags;
    this.lineno = lineno;
};

Sk.Ast.AssName.prototype.getChildren = function(self) {
    return [self.name, self.flags];
};

Sk.Ast.AssName.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.AssTuple = function AssTuple(nodes, lineno)
{
    this.nodeName = "AssTuple";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.AssTuple.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.AssTuple.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Assert = function Assert(test, fail, lineno)
{
    this.nodeName = "Assert";
    this.test = test;
    this.fail = fail;
    this.lineno = lineno;
};

Sk.Ast.Assert.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.test)
    children.append(self.fail)
        return children;
};

Sk.Ast.Assert.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.test);
    if (self.fail !== undefined)
        nodelist.append(self.fail);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Assign = function Assign(nodes, expr, lineno)
{
    this.nodeName = "Assign";
    this.nodes = nodes;
    this.expr = expr;
    this.lineno = lineno;
};

Sk.Ast.Assign.prototype.getChildren = function(self) {
    var children = [];
    children.extend(flatten(self.nodes))
    children.append(self.expr)
        return children;
};

Sk.Ast.Assign.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    nodelist.append(self.expr);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.AugAssign = function AugAssign(node, op, expr, lineno)
{
    this.nodeName = "AugAssign";
    this.node = node;
    this.op = op;
    this.expr = expr;
    this.lineno = lineno;
};

Sk.Ast.AugAssign.prototype.getChildren = function(self) {
    return [self.node, self.op, self.expr];
};

Sk.Ast.AugAssign.prototype.getChildNodes = function(self) {
    return [self.node, self.expr];
};


// --------------------------------------------------------
Sk.Ast.AugGetattr = function AugGetattr(node, lineno)
{
    this.nodeName = "AugGetattr";
    this.node = node;
    this.lineno = lineno;
};

Sk.Ast.AugGetattr.prototype.getChildren = function(self) {
    return [self.node];
};

Sk.Ast.AugGetattr.prototype.getChildNodes = function(self) {
    return [self.node];
};


// --------------------------------------------------------
Sk.Ast.AugName = function AugName(node, lineno)
{
    this.nodeName = "AugName";
    this.node = node;
    this.lineno = lineno;
};

Sk.Ast.AugName.prototype.getChildren = function(self) {
    return [self.node];
};

Sk.Ast.AugName.prototype.getChildNodes = function(self) {
    return [self.node];
};


// --------------------------------------------------------
Sk.Ast.AugSlice = function AugSlice(node, lineno)
{
    this.nodeName = "AugSlice";
    this.node = node;
    this.lineno = lineno;
};

Sk.Ast.AugSlice.prototype.getChildren = function(self) {
    return [self.node];
};

Sk.Ast.AugSlice.prototype.getChildNodes = function(self) {
    return [self.node];
};


// --------------------------------------------------------
Sk.Ast.AugSubscript = function AugSubscript(node, lineno)
{
    this.nodeName = "AugSubscript";
    this.node = node;
    this.lineno = lineno;
};

Sk.Ast.AugSubscript.prototype.getChildren = function(self) {
    return [self.node];
};

Sk.Ast.AugSubscript.prototype.getChildNodes = function(self) {
    return [self.node];
};


// --------------------------------------------------------
Sk.Ast.Backquote = function Backquote(expr, lineno)
{
    this.nodeName = "Backquote";
    this.expr = expr;
    this.lineno = lineno;
};

Sk.Ast.Backquote.prototype.getChildren = function(self) {
    return [self.expr];
};

Sk.Ast.Backquote.prototype.getChildNodes = function(self) {
    return [self.expr];
};


// --------------------------------------------------------
Sk.Ast.Bitand = function Bitand(nodes, lineno)
{
    this.nodeName = "Bitand";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.Bitand.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.Bitand.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Bitor = function Bitor(nodes, lineno)
{
    this.nodeName = "Bitor";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.Bitor.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.Bitor.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Bitxor = function Bitxor(nodes, lineno)
{
    this.nodeName = "Bitxor";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.Bitxor.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.Bitxor.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Break_ = function Break_(lineno)
{
    this.nodeName = "Break_";
    this.lineno = lineno;
};

Sk.Ast.Break_.prototype.getChildren = function(self) {
    return [];
};

Sk.Ast.Break_.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.CallFunc = function CallFunc(node, args, star_args, dstar_args, lineno)
{
    this.nodeName = "CallFunc";
    this.node = node;
    this.args = args;
    this.star_args = star_args;
    this.dstar_args = dstar_args;
    this.lineno = lineno;
};

Sk.Ast.CallFunc.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.node)
    children.extend(flatten(self.args))
    children.append(self.star_args)
    children.append(self.dstar_args)
        return children;
};

Sk.Ast.CallFunc.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.node);
    nodelist.extend(flatten_nodes(self.args));
    if (self.star_args !== undefined)
        nodelist.append(self.star_args);
    if (self.dstar_args !== undefined)
        nodelist.append(self.dstar_args);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Class_ = function Class_(name, bases, doc, code, decorators, lineno)
{
    this.nodeName = "Class_";
    this.name = name;
    this.bases = bases;
    this.doc = doc;
    this.code = code;
    this.decorators = decorators;
    this.lineno = lineno;
};

Sk.Ast.Class_.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.name)
    children.extend(flatten(self.bases))
    children.append(self.doc)
    children.append(self.code)
    children.append(self.decorators)
        return children;
};

Sk.Ast.Class_.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.bases));
    nodelist.append(self.code);
    if (self.decorators !== undefined)
        nodelist.append(self.decorators);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Compare = function Compare(expr, ops, lineno)
{
    this.nodeName = "Compare";
    this.expr = expr;
    this.ops = ops;
    this.lineno = lineno;
};

Sk.Ast.Compare.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.expr)
    children.extend(flatten(self.ops))
        return children;
};

Sk.Ast.Compare.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.expr);
    nodelist.extend(flatten_nodes(self.ops));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Const_ = function Const_(value, lineno)
{
    this.nodeName = "Const_";
    this.value = value;
    this.lineno = lineno;
};

Sk.Ast.Const_.prototype.getChildren = function(self) {
    return [self.value];
};

Sk.Ast.Const_.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.Continue_ = function Continue_(lineno)
{
    this.nodeName = "Continue_";
    this.lineno = lineno;
};

Sk.Ast.Continue_.prototype.getChildren = function(self) {
    return [];
};

Sk.Ast.Continue_.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.Decorators = function Decorators(nodes, lineno)
{
    this.nodeName = "Decorators";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.Decorators.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.Decorators.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Dict = function Dict(items, lineno)
{
    this.nodeName = "Dict";
    this.items = items;
    this.lineno = lineno;
};

Sk.Ast.Dict.prototype.getChildren = function(self) {
    return [flatten(self.items)];
};

Sk.Ast.Dict.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.items));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Discard = function Discard(expr, lineno)
{
    this.nodeName = "Discard";
    this.expr = expr;
    this.lineno = lineno;
};

Sk.Ast.Discard.prototype.getChildren = function(self) {
    return [self.expr];
};

Sk.Ast.Discard.prototype.getChildNodes = function(self) {
    return [self.expr];
};


// --------------------------------------------------------
Sk.Ast.Div = function Div(left, right, lineno)
{
    this.nodeName = "Div";
    this.left = left;
    this.right = right;
    this.lineno = lineno;
};

Sk.Ast.Div.prototype.getChildren = function(self) {
    return [self.left, self.right];
};

Sk.Ast.Div.prototype.getChildNodes = function(self) {
    return [self.left, self.right];
};


// --------------------------------------------------------
Sk.Ast.Ellipsis = function Ellipsis(lineno)
{
    this.nodeName = "Ellipsis";
    this.lineno = lineno;
};

Sk.Ast.Ellipsis.prototype.getChildren = function(self) {
    return [];
};

Sk.Ast.Ellipsis.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.Exec = function Exec(expr, locals, globals, lineno)
{
    this.nodeName = "Exec";
    this.expr = expr;
    this.locals = locals;
    this.globals = globals;
    this.lineno = lineno;
};

Sk.Ast.Exec.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.expr)
    children.append(self.locals)
    children.append(self.globals)
        return children;
};

Sk.Ast.Exec.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.expr);
    if (self.locals !== undefined)
        nodelist.append(self.locals);
    if (self.globals !== undefined)
        nodelist.append(self.globals);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.FloorDiv = function FloorDiv(left, right, lineno)
{
    this.nodeName = "FloorDiv";
    this.left = left;
    this.right = right;
    this.lineno = lineno;
};

Sk.Ast.FloorDiv.prototype.getChildren = function(self) {
    return [self.left, self.right];
};

Sk.Ast.FloorDiv.prototype.getChildNodes = function(self) {
    return [self.left, self.right];
};


// --------------------------------------------------------
Sk.Ast.For_ = function For_(assign, list, body, else_, lineno)
{
    this.nodeName = "For_";
    this.assign = assign;
    this.list = list;
    this.body = body;
    this.else_ = else_;
    this.lineno = lineno;
};

Sk.Ast.For_.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.assign)
    children.append(self.list)
    children.append(self.body)
    children.append(self.else_)
        return children;
};

Sk.Ast.For_.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.assign);
    nodelist.append(self.list);
    nodelist.append(self.body);
    if (self.else_ !== undefined)
        nodelist.append(self.else_);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.From = function From(modname, names, level, lineno)
{
    this.nodeName = "From";
    this.modname = modname;
    this.names = names;
    this.level = level;
    this.lineno = lineno;
};

Sk.Ast.From.prototype.getChildren = function(self) {
    return [self.modname, self.names, self.level];
};

Sk.Ast.From.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.Function_ = function Function_(decorators, name, argnames, defaults, varargs, kwargs, doc, code, lineno)
{
    this.nodeName = "Function_";
    this.decorators = decorators;
    this.name = name;
    this.argnames = argnames;
    this.defaults = defaults;
    this.varargs = varargs;
    this.kwargs = kwargs;
    this.doc = doc;
    this.code = code;
    this.lineno = lineno;
};

Sk.Ast.Function_.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.decorators)
    children.append(self.name)
    children.append(self.argnames)
    children.extend(flatten(self.defaults))
    children.append(self.varargs)
    children.append(self.kwargs)
    children.append(self.doc)
    children.append(self.code)
        return children;
};

Sk.Ast.Function_.prototype.getChildNodes = function(self) {
    var nodelist = [];
    if (self.decorators !== undefined)
        nodelist.append(self.decorators);
    nodelist.extend(flatten_nodes(self.defaults));
    nodelist.append(self.varargs);
    nodelist.append(self.kwargs);
    nodelist.append(self.code);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.GenExpr = function GenExpr(code, lineno)
{
    this.nodeName = "GenExpr";
    this.code = code;
    this.lineno = lineno;
    this.argnames = ['.0'];
    this.varargs = this.kwargs = null;

};

Sk.Ast.GenExpr.prototype.getChildren = function(self) {
    return [self.code];
};

Sk.Ast.GenExpr.prototype.getChildNodes = function(self) {
    return [self.code];
};


// --------------------------------------------------------
Sk.Ast.GenExprFor = function GenExprFor(assign, iter, ifs, lineno)
{
    this.nodeName = "GenExprFor";
    this.assign = assign;
    this.iter = iter;
    this.ifs = ifs;
    this.lineno = lineno;
    this.is_outmost = false;
};

Sk.Ast.GenExprFor.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.assign)
    children.append(self.iter)
    children.extend(flatten(self.ifs))
        return children;
};

Sk.Ast.GenExprFor.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.assign);
    nodelist.append(self.iter);
    nodelist.extend(flatten_nodes(self.ifs));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.GenExprIf = function GenExprIf(test, lineno)
{
    this.nodeName = "GenExprIf";
    this.test = test;
    this.lineno = lineno;
};

Sk.Ast.GenExprIf.prototype.getChildren = function(self) {
    return [self.test];
};

Sk.Ast.GenExprIf.prototype.getChildNodes = function(self) {
    return [self.test];
};


// --------------------------------------------------------
Sk.Ast.GenExprInner = function GenExprInner(expr, quals, lineno)
{
    this.nodeName = "GenExprInner";
    this.expr = expr;
    this.quals = quals;
    this.lineno = lineno;
};

Sk.Ast.GenExprInner.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.expr)
    children.extend(flatten(self.quals))
        return children;
};

Sk.Ast.GenExprInner.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.expr);
    nodelist.extend(flatten_nodes(self.quals));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.GenExprTransformed = function GenExprTransformed(node, lineno)
{
    this.nodeName = "GenExprTransformed";
    this.node = node;
    this.lineno = lineno;
};

Sk.Ast.GenExprTransformed.prototype.getChildren = function(self) {
    return [self.node];
};

Sk.Ast.GenExprTransformed.prototype.getChildNodes = function(self) {
    return [self.node];
};


// --------------------------------------------------------
Sk.Ast.Getattr = function Getattr(expr, attrname, lineno)
{
    this.nodeName = "Getattr";
    this.expr = expr;
    this.attrname = attrname;
    this.lineno = lineno;
};

Sk.Ast.Getattr.prototype.getChildren = function(self) {
    return [self.expr, self.attrname];
};

Sk.Ast.Getattr.prototype.getChildNodes = function(self) {
    return [self.expr];
};


// --------------------------------------------------------
Sk.Ast.Global = function Global(names, lineno)
{
    this.nodeName = "Global";
    this.names = names;
    this.lineno = lineno;
};

Sk.Ast.Global.prototype.getChildren = function(self) {
    return [self.names];
};

Sk.Ast.Global.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.IfExp = function IfExp(test, then, else_, lineno)
{
    this.nodeName = "IfExp";
    this.test = test;
    this.then = then;
    this.else_ = else_;
    this.lineno = lineno;
};

Sk.Ast.IfExp.prototype.getChildren = function(self) {
    return [self.test, self.then, self.else_];
};

Sk.Ast.IfExp.prototype.getChildNodes = function(self) {
    return [self.test, self.then, self.else_];
};


// --------------------------------------------------------
Sk.Ast.If_ = function If_(tests, else_, lineno)
{
    this.nodeName = "If_";
    this.tests = tests;
    this.else_ = else_;
    this.lineno = lineno;
};

Sk.Ast.If_.prototype.getChildren = function(self) {
    var children = [];
    children.extend(flatten(self.tests))
    children.append(self.else_)
        return children;
};

Sk.Ast.If_.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.tests));
    if (self.else_ !== undefined)
        nodelist.append(self.else_);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Import_ = function Import_(names, lineno)
{
    this.nodeName = "Import_";
    this.names = names;
    this.lineno = lineno;
};

Sk.Ast.Import_.prototype.getChildren = function(self) {
    return [self.names];
};

Sk.Ast.Import_.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.Interactive = function Interactive(node, lineno)
{
    this.nodeName = "Interactive";
    this.node = node;
    this.lineno = lineno;
};

Sk.Ast.Interactive.prototype.getChildren = function(self) {
    return [self.node];
};

Sk.Ast.Interactive.prototype.getChildNodes = function(self) {
    return [self.node];
};


// --------------------------------------------------------
Sk.Ast.Invert = function Invert(expr, lineno)
{
    this.nodeName = "Invert";
    this.expr = expr;
    this.lineno = lineno;
};

Sk.Ast.Invert.prototype.getChildren = function(self) {
    return [self.expr];
};

Sk.Ast.Invert.prototype.getChildNodes = function(self) {
    return [self.expr];
};


// --------------------------------------------------------
Sk.Ast.Keyword = function Keyword(name, expr, lineno)
{
    this.nodeName = "Keyword";
    this.name = name;
    this.expr = expr;
    this.lineno = lineno;
};

Sk.Ast.Keyword.prototype.getChildren = function(self) {
    return [self.name, self.expr];
};

Sk.Ast.Keyword.prototype.getChildNodes = function(self) {
    return [self.expr];
};


// --------------------------------------------------------
Sk.Ast.Lambda = function Lambda(argnames, defaults, varargs, kwargs, code, lineno)
{
    this.nodeName = "Lambda";
    this.argnames = argnames;
    this.defaults = defaults;
    this.varargs = varargs;
    this.kwargs = kwargs;
    this.code = code;
    this.lineno = lineno;
};

Sk.Ast.Lambda.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.argnames)
    children.extend(flatten(self.defaults))
    children.append(self.varargs)
    children.append(self.kwargs)
    children.append(self.code)
        return children;
};

Sk.Ast.Lambda.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.defaults));
    nodelist.append(self.varargs);
    nodelist.append(self.kwargs);
    nodelist.append(self.code);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.LeftShift = function LeftShift(left, right, lineno)
{
    this.nodeName = "LeftShift";
    this.left = left;
    this.right = right;
    this.lineno = lineno;
};

Sk.Ast.LeftShift.prototype.getChildren = function(self) {
    return [self.left, self.right];
};

Sk.Ast.LeftShift.prototype.getChildNodes = function(self) {
    return [self.left, self.right];
};


// --------------------------------------------------------
Sk.Ast.List = function List(nodes, lineno)
{
    this.nodeName = "List";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.List.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.List.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.ListComp = function ListComp(expr, quals, lineno)
{
    this.nodeName = "ListComp";
    this.expr = expr;
    this.quals = quals;
    this.lineno = lineno;
};

Sk.Ast.ListComp.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.expr)
    children.extend(flatten(self.quals))
        return children;
};

Sk.Ast.ListComp.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.expr);
    nodelist.extend(flatten_nodes(self.quals));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.ListCompFor = function ListCompFor(assign, list, ifs, lineno)
{
    this.nodeName = "ListCompFor";
    this.assign = assign;
    this.list = list;
    this.ifs = ifs;
    this.lineno = lineno;
};

Sk.Ast.ListCompFor.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.assign)
    children.append(self.list)
    children.extend(flatten(self.ifs))
        return children;
};

Sk.Ast.ListCompFor.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.assign);
    nodelist.append(self.list);
    nodelist.extend(flatten_nodes(self.ifs));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.ListCompIf = function ListCompIf(test, lineno)
{
    this.nodeName = "ListCompIf";
    this.test = test;
    this.lineno = lineno;
};

Sk.Ast.ListCompIf.prototype.getChildren = function(self) {
    return [self.test];
};

Sk.Ast.ListCompIf.prototype.getChildNodes = function(self) {
    return [self.test];
};


// --------------------------------------------------------
Sk.Ast.Mod = function Mod(left, right, lineno)
{
    this.nodeName = "Mod";
    this.left = left;
    this.right = right;
    this.lineno = lineno;
};

Sk.Ast.Mod.prototype.getChildren = function(self) {
    return [self.left, self.right];
};

Sk.Ast.Mod.prototype.getChildNodes = function(self) {
    return [self.left, self.right];
};


// --------------------------------------------------------
Sk.Ast.Module = function Module(doc, node, lineno)
{
    this.nodeName = "Module";
    this.doc = doc;
    this.node = node;
    this.lineno = lineno;
};

Sk.Ast.Module.prototype.getChildren = function(self) {
    return [self.doc, self.node];
};

Sk.Ast.Module.prototype.getChildNodes = function(self) {
    return [self.node];
};


// --------------------------------------------------------
Sk.Ast.Mul = function Mul(left, right, lineno)
{
    this.nodeName = "Mul";
    this.left = left;
    this.right = right;
    this.lineno = lineno;
};

Sk.Ast.Mul.prototype.getChildren = function(self) {
    return [self.left, self.right];
};

Sk.Ast.Mul.prototype.getChildNodes = function(self) {
    return [self.left, self.right];
};


// --------------------------------------------------------
Sk.Ast.Name = function Name(name, lineno)
{
    this.nodeName = "Name";
    this.name = name;
    this.lineno = lineno;
};

Sk.Ast.Name.prototype.getChildren = function(self) {
    return [self.name];
};

Sk.Ast.Name.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.Not = function Not(expr, lineno)
{
    this.nodeName = "Not";
    this.expr = expr;
    this.lineno = lineno;
};

Sk.Ast.Not.prototype.getChildren = function(self) {
    return [self.expr];
};

Sk.Ast.Not.prototype.getChildNodes = function(self) {
    return [self.expr];
};


// --------------------------------------------------------
Sk.Ast.Or = function Or(nodes, lineno)
{
    this.nodeName = "Or";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.Or.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.Or.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Pass = function Pass(lineno)
{
    this.nodeName = "Pass";
    this.lineno = lineno;
};

Sk.Ast.Pass.prototype.getChildren = function(self) {
    return [];
};

Sk.Ast.Pass.prototype.getChildNodes = function(self) {
    return [];
};


// --------------------------------------------------------
Sk.Ast.Power = function Power(left, right, lineno)
{
    this.nodeName = "Power";
    this.left = left;
    this.right = right;
    this.lineno = lineno;
};

Sk.Ast.Power.prototype.getChildren = function(self) {
    return [self.left, self.right];
};

Sk.Ast.Power.prototype.getChildNodes = function(self) {
    return [self.left, self.right];
};


// --------------------------------------------------------
Sk.Ast.Print = function Print(nodes, dest, nl, lineno)
{
    this.nodeName = "Print";
    this.nodes = nodes;
    this.dest = dest;
    this.nl = nl;
    this.lineno = lineno;
};

Sk.Ast.Print.prototype.getChildren = function(self) {
    var children = [];
    children.extend(flatten(self.nodes))
    children.append(self.dest)
    children.append(self.nl)
        return children;
};

Sk.Ast.Print.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    if (self.dest !== undefined)
        nodelist.append(self.dest);
    nodelist.append(self.nl);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Raise = function Raise(expr1, expr2, expr3, lineno)
{
    this.nodeName = "Raise";
    this.expr1 = expr1;
    this.expr2 = expr2;
    this.expr3 = expr3;
    this.lineno = lineno;
};

Sk.Ast.Raise.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.expr1)
    children.append(self.expr2)
    children.append(self.expr3)
        return children;
};

Sk.Ast.Raise.prototype.getChildNodes = function(self) {
    var nodelist = [];
    if (self.expr1 !== undefined)
        nodelist.append(self.expr1);
    if (self.expr2 !== undefined)
        nodelist.append(self.expr2);
    if (self.expr3 !== undefined)
        nodelist.append(self.expr3);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Return_ = function Return_(value, lineno)
{
    this.nodeName = "Return_";
    this.value = value;
    this.lineno = lineno;
};

Sk.Ast.Return_.prototype.getChildren = function(self) {
    return [self.value];
};

Sk.Ast.Return_.prototype.getChildNodes = function(self) {
    return [self.value];
};


// --------------------------------------------------------
Sk.Ast.RightShift = function RightShift(left, right, lineno)
{
    this.nodeName = "RightShift";
    this.left = left;
    this.right = right;
    this.lineno = lineno;
};

Sk.Ast.RightShift.prototype.getChildren = function(self) {
    return [self.left, self.right];
};

Sk.Ast.RightShift.prototype.getChildNodes = function(self) {
    return [self.left, self.right];
};


// --------------------------------------------------------
Sk.Ast.Slice = function Slice(expr, flags, lower, upper, lineno)
{
    this.nodeName = "Slice";
    this.expr = expr;
    this.flags = flags;
    this.lower = lower;
    this.upper = upper;
    this.lineno = lineno;
};

Sk.Ast.Slice.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.expr)
    children.append(self.flags)
    children.append(self.lower)
    children.append(self.upper)
        return children;
};

Sk.Ast.Slice.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.expr);
    if (self.lower !== undefined)
        nodelist.append(self.lower);
    if (self.upper !== undefined)
        nodelist.append(self.upper);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Sliceobj = function Sliceobj(nodes, lineno)
{
    this.nodeName = "Sliceobj";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.Sliceobj.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.Sliceobj.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Stmt = function Stmt(nodes, lineno)
{
    this.nodeName = "Stmt";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.Stmt.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.Stmt.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Sub = function Sub(left, right, lineno)
{
    this.nodeName = "Sub";
    this.left = left;
    this.right = right;
    this.lineno = lineno;
};

Sk.Ast.Sub.prototype.getChildren = function(self) {
    return [self.left, self.right];
};

Sk.Ast.Sub.prototype.getChildNodes = function(self) {
    return [self.left, self.right];
};


// --------------------------------------------------------
Sk.Ast.Subscript = function Subscript(expr, flags, subs, lineno)
{
    this.nodeName = "Subscript";
    this.expr = expr;
    this.flags = flags;
    this.subs = subs;
    this.lineno = lineno;
};

Sk.Ast.Subscript.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.expr)
    children.append(self.flags)
    children.extend(flatten(self.subs))
        return children;
};

Sk.Ast.Subscript.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.expr);
    nodelist.extend(flatten_nodes(self.subs));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.TryExcept = function TryExcept(body, handlers, else_, lineno)
{
    this.nodeName = "TryExcept";
    this.body = body;
    this.handlers = handlers;
    this.else_ = else_;
    this.lineno = lineno;
};

Sk.Ast.TryExcept.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.body)
    children.extend(flatten(self.handlers))
    children.append(self.else_)
        return children;
};

Sk.Ast.TryExcept.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.body);
    nodelist.extend(flatten_nodes(self.handlers));
    if (self.else_ !== undefined)
        nodelist.append(self.else_);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.TryFinally = function TryFinally(body, final_, lineno)
{
    this.nodeName = "TryFinally";
    this.body = body;
    this.final_ = final_;
    this.lineno = lineno;
};

Sk.Ast.TryFinally.prototype.getChildren = function(self) {
    return [self.body, self.final_];
};

Sk.Ast.TryFinally.prototype.getChildNodes = function(self) {
    return [self.body, self.final_];
};


// --------------------------------------------------------
Sk.Ast.Tuple = function Tuple(nodes, lineno)
{
    this.nodeName = "Tuple";
    this.nodes = nodes;
    this.lineno = lineno;
};

Sk.Ast.Tuple.prototype.getChildren = function(self) {
    return [flatten(self.nodes)];
};

Sk.Ast.Tuple.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.extend(flatten_nodes(self.nodes));
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.UnaryAdd = function UnaryAdd(expr, lineno)
{
    this.nodeName = "UnaryAdd";
    this.expr = expr;
    this.lineno = lineno;
};

Sk.Ast.UnaryAdd.prototype.getChildren = function(self) {
    return [self.expr];
};

Sk.Ast.UnaryAdd.prototype.getChildNodes = function(self) {
    return [self.expr];
};


// --------------------------------------------------------
Sk.Ast.UnarySub = function UnarySub(expr, lineno)
{
    this.nodeName = "UnarySub";
    this.expr = expr;
    this.lineno = lineno;
};

Sk.Ast.UnarySub.prototype.getChildren = function(self) {
    return [self.expr];
};

Sk.Ast.UnarySub.prototype.getChildNodes = function(self) {
    return [self.expr];
};


// --------------------------------------------------------
Sk.Ast.While_ = function While_(test, body, else_, lineno)
{
    this.nodeName = "While_";
    this.test = test;
    this.body = body;
    this.else_ = else_;
    this.lineno = lineno;
};

Sk.Ast.While_.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.test)
    children.append(self.body)
    children.append(self.else_)
        return children;
};

Sk.Ast.While_.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.test);
    nodelist.append(self.body);
    if (self.else_ !== undefined)
        nodelist.append(self.else_);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.With_ = function With_(expr, vars, body, lineno)
{
    this.nodeName = "With_";
    this.expr = expr;
    this.vars = vars;
    this.body = body;
    this.lineno = lineno;
};

Sk.Ast.With_.prototype.getChildren = function(self) {
    var children = [];
    children.append(self.expr)
    children.append(self.vars)
    children.append(self.body)
        return children;
};

Sk.Ast.With_.prototype.getChildNodes = function(self) {
    var nodelist = [];
    nodelist.append(self.expr);
    if (self.vars !== undefined)
        nodelist.append(self.vars);
    nodelist.append(self.body);
    return nodelist;
};


// --------------------------------------------------------
Sk.Ast.Yield_ = function Yield_(value, lineno)
{
    this.nodeName = "Yield_";
    this.value = value;
    this.lineno = lineno;
};

Sk.Ast.Yield_.prototype.getChildren = function(self) {
    return [self.value];
};

Sk.Ast.Yield_.prototype.getChildNodes = function(self) {
    return [self.value];
};



}());

